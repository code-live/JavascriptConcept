----------------------Creation of Class and prototype------------------------------------

function bar() {
	var x = 11;									// private variable
	this.check =  true;							// public variables
	this.getName = function() {
		console.log(this.check);
	}
}

bar.prototype.common = function () { 			// javascript prototype function 
	console.log(this.check);					// it has access of current "this" 
	// this will print true
	// it is part of class 
}

var obj = new bar();							// new instance creation
obj.getName();									// accessing class method using obj instance

console.log(obj);	
/*
		barcheck: true
		getName: ()
		__proto__: Object
		common: ()
		constructor: bar()
		__proto__: Object
*/					

-------------------------------------------------------------------------------------------------

(function() {

	  function f3() {  
	    return this;
	  }
	  f3.call(this) === window; // return true

	  function f4() {
	    this.herp = 'derp';
	    console.log(this);				// f4 = {herp: "derp"}
	  }
	  var a = 30;
	  function Thing() {
	    this.thisIsEasyToUnderstand = 'just kidding';
	    console.log(this); 				// thing = {thisIsEasyToUnderstand: 'just kidding'};
	    f4.call(this);
	    console.log(this);				// thing = {thisIsEasyToUnderstand: 'just kidding', herp: 'derp'};
	  }
	  var thing = new Thing(); 
	  	  // thing = {thisIsEasyToUnderstand: 'just kidding', herp: 'derp'};
	  var f4 = new f4();
	  	 // f4 = {herp: "derp"}
	})();

-------------------------------------------------------------------------------------------------

	Where a function uses the this keyword in its body, its value can be bound to a particular object in the call using the call or apply methods which all functions inherit from Function.prototype.

	function add(c, d, e) {
	  return this.a + this.b + c + d + e;
	}

	var o = {a: 1, b: 3};

	// The first parameter is the object to use as
	// 'this', subsequent parameters are passed as 
	// arguments in the function call
	var x = add.call(o, 5, 7, 11); // 1 + 3 + 5 + 7 = 16
	console.log(x);

	// The first parameter is the object to use as
	// 'this', the second is an array whose
	// members are used as the arguments in the function call
	var y = add.apply(o, [10, 20, 11]); // 1 + 3 + 10 + 20 = 34
	console.log(y);	

	Note that with call and apply, if the value passed as this is not an object, an attempt will be made to convert it to an object using the internal ToObject operation. So if the value passed is a primitive like 7 or 'foo', it will be converted to an Object using the related constructor, so the primitive number 7 is converted to an object as if by new Number(7) and the string 'foo' to an object as if by new String('foo'), e.g.

	function bar() {
	  console.log(Object.prototype.toString.call(this));
	}

	bar.call(7); // [object Number]

-------------------------------------------------------------------------------------------------

ECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject) creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.

function f() {
  return this.a;
}

var g = f.bind({a: 'azerty'});
console.log(g()); // azerty

var h = g.bind({a: 'yoo'}); // bind only works once!
console.log(h()); // azerty

var o = {a: 37, f: f, g: g, h: h};
console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty

-------------------------------------------------------------------------------------------------